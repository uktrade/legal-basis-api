---
version: 2

environment: &environment
  DJANGO_ENV: test
  DJANGO_SECRET_KEY: 4c1nzrs&8^g+t$tt**wl7u8)0p8ql3vr28rjn1mdcnr*crjz*#
  DATABASE_URL: postgres://lba_user:lba_password@127.0.0.1:5432/legal-basis
  AUTHBROKER_URL: https://sso.trade.gov.uk/
  AUTHBROKER_CLIENT_ID: client_id
  AUTHBROKER_CLIENT_SECRET: client_secret
  DOMAIN_NAME: trade.gov.uk
  TLS_EMAIL: webmaster@trade.gov.uk
  POSTGRES_USER: lba_user
  POSTGRES_PASSWORD: lba_password
  POSTGRES_DB: legal-basis
  ACTIVITY_STREAM_URL: https://localhost/v3/
  ACTIVITY_STREAM_ID: fake_id
  ACTIVITY_STREAM_KEY: fake_key
  REDIS_URL: redis://localhost/
  ELASTIC_APM_DISABLE_SEND: true
  DYNAMICS_INSTANCE_URI: https://localhost
  DYNAMICS_TENANT_ID: xxx
  DYNAMICS_APPLICATION_ID: xxx
  DYNAMICS_CLIENT_SECRET: xxx

workflows:
  version: 2

  build-and-test:
    jobs:
      - build-and-test

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.10
        environment:
          <<: *environment

      - image: postgres:12
        environment:
          <<: *environment

      - image: cimg/redis:5.0.14
        environment:
          <<: *environment
    steps:
      - checkout

      - restore_cache:
          name: Restore pip cache
          keys: v2-dependencies-{{ checksum "requirements-dev.txt" }}

      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install --cache-dir ~/cache/pip --progress-bar off -r requirements-dev.txt

      - save_cache:
          name: Save pip cache
          key: v2-dependencies-{{ checksum "requirements-dev.txt" }}
          paths:
            - "venv"

      - run:
          name: Run flake8
          command: |
            . venv/bin/activate
            flake8 --exclude venv .

      - run:
          name: Check types
          # python static type checker, ensures the code makes use of all
          # variables and functions
          command: |
            . venv/bin/activate
            make lint-types

      - run:
          name: Run pytest
          command: |
            . venv/bin/activate
            python manage.py collectstatic --no-input
            pytest --dead-fixtures --dup-fixtures \
              --junitxml=.test-results/pytest-fixtures/results.xml &&
            pytest --junitxml=.test-results/pytest/results.xml \
              --cov-report=html:coverage

      - run:
          name: Check django settings
          # system check that inspects the entire django project for common problems
          command: |
            . venv/bin/activate
            python manage.py check --deploy --fail-level WARNING
          environment:
            DJANGO_ENV: production

      - run:
          name: Run Bandit security linter
          command: |
            . venv/bin/activate
            bandit -r server

      - run:
          name: Check dependency compatibility
          # verifies installed packages have compatible dependencies
          command: |
            . venv/bin/activate
            pip check

      - run:
          name: Check docs
          command: |
            . venv/bin/activate
            doc8 -q --ignore-path venv docs

      - run:
          name: Lint YAML
          command: |
            . venv/bin/activate
            yamllint -s .

      - store_test_results:
          path: .test-results

      - store_artifacts:
          path: coverage
